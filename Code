# Importing necessary libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
df = pd.read_csv('C:/Users/Hp/Downloads/mymoviedb.csv', lineterminator='\n')

# Display first 5 rows
print(df.head())

# Display dataset information
df.info()

# Check for duplicate rows
print("Total Duplicates:", df.duplicated().sum())

# Convert 'Release_Date' to year format
df['Release_Date'] = pd.to_datetime(df['Release_Date']).dt.year

# Drop unnecessary columns
columns_to_drop = ['Overview', 'Original_Language', 'Poster_Url']
df.drop(columns=columns_to_drop, axis=1, inplace=True)

# Function to categorize numerical values
def categorize_col(df, col, labels):
    edges = np.linspace(df[col].min(), df[col].max(), num=len(labels) + 1)
    df[col] = pd.cut(df[col], edges, labels=labels, duplicates='drop')
    return df

# Categorizing 'Vote_Average' into 4 groups
labels = ['Not Popular', 'Below Avg', 'Average', 'Popular']
categorize_col(df, 'Vote_Average', labels)

# Handling missing values by dropping them
df.dropna(inplace=True)

# Splitting 'Genre' column (some movies have multiple genres)
df['Genre'] = df['Genre'].str.split(', ')  # Convert string to list
df = df.explode('Genre').reset_index(drop=True)  # Separate each genre into a new row

# Convert 'Genre' column to categorical data type
df['Genre'] = df['Genre'].astype('category')

# Setting Seaborn style for better visualization
sns.set_style('whitegrid')

### 1. Genre Distribution Visualization ###
plt.figure(figsize=(10, 5))
sns.countplot(y=df['Genre'], order=df['Genre'].value_counts().index, palette='coolwarm')
plt.title('Genre Distribution', fontsize=14)
plt.xlabel('Count')
plt.ylabel('Genre')
plt.show()

### 2. Vote Average Distribution ###
plt.figure(figsize=(8, 4))
sns.countplot(y=df['Vote_Average'], order=df['Vote_Average'].value_counts().index, palette='Blues')
plt.title('Votes Distribution', fontsize=14)
plt.xlabel('Count')
plt.ylabel('Vote Category')
plt.show()

### 3. Movies Released Per Year ###
plt.figure(figsize=(10, 5))
df['Release_Date'].hist(bins=30, color='skyblue', edgecolor='black')
plt.title('Movies Released Per Year', fontsize=14)
plt.xlabel('Year')
plt.ylabel('Number of Movies')
plt.show()

# Find the year with the most movies
most_movies_year = df['Release_Date'].value_counts().idxmax()
print("Year with Most Movies Released:", most_movies_year)

### 4. Find the Most and Least Popular Movie ###
most_popular_movie = df[df['Popularity'] == df['Popularity'].max()]
least_popular_movie = df[df['Popularity'] == df['Popularity'].min()]

print("\nMost Popular Movie:\n", most_popular_movie[['Title', 'Genre', 'Popularity']])
print("\nLeast Popular Movie:\n", least_popular_movie[['Title', 'Genre', 'Popularity']])

### 5. Top 10 Most Popular Movies ###
top_movies = df[['Title', 'Popularity', 'Genre']].sort_values(by='Popularity', ascending=False).head(10)
print("\nTop 10 Most Popular Movies:\n", top_movies)

### 6. Box Plot for Votes ###
plt.figure(figsize=(8, 5))
sns.boxplot(y=df['Vote_Average'], palette='cool')
plt.title('Vote Average Distribution', fontsize=14)
plt.show()

### 7. Popularity Trend Over Years ###
plt.figure(figsize=(12, 5))
sns.lineplot(x=df.groupby('Release_Date')['Popularity'].mean().index,
             y=df.groupby('Release_Date')['Popularity'].mean(), color='red')
plt.title('Popularity Trend Over Years', fontsize=14)
plt.xlabel('Year')
plt.ylabel('Average Popularity')
plt.grid()
plt.show()
